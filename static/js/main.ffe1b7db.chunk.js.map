{"version":3,"sources":["functions/shipFactory.js","functions/helpers.js","functions/gameBoardFactory.js","functions/compPlayerFactory.js","components/Board.js","components/PlayerSection.js","components/RestartButton.js","components/Modal.js","components/GameSection.js","components/HeaderSection.js","App.js","index.js"],"names":["shipFactory","length","name","hitPos","hit","coords","push","isSunk","random0to9","Math","floor","random","createShipYard","shipLengths","board","shipYard","forEach","ship","newShip","newCoords","generateShipCoords","coordsFree","generateValidCoords","pair","r","c","status","placeShip","every","startCoords","orientation","endPos","shipCoords","i","generateHorCoords","generateVerCoords","gameBoardFactory","size","row","j","cell","totalShipLengths","reduce","tot","cur","sumShipLengths","receiveAttack","hitShip","find","getShipsCoords","getEmptySquares","emptySquares","getLegalSquares","legalSquares","allSunk","compPlayerFactory","prevHand","adjSquares","prevAttack","getAdjacentSquares","filter","square","map","updateAdjCoords","adjacentCoords","attackCoords","uniqCoords","JSON","stringify","reverse","e","a","indexOf","parse","splice","getAttackCoords","wasHumanHit","updatedCoords","updatedAdjCoords","Board","props","type","canClick","className","index","id","toString","onClick","undefined","PlayerSection","score","totalScore","RestartButton","Modal","winner","showHideClassName","show","humanScore","GameSection","useState","computer","setComputer","compBoard","setCompBoard","compTurn","setCompTurn","compScore","setCompScore","setWashumanHit","human","setHuman","humanBoard","setHumanBoard","setHumanScore","compPlayer","setCompPlayer","displayWin","setDisplayWin","makeCompMove","compMove","newBoard","restartGame","newHuman","newComputer","newCompPlayer","useEffect","isMoveLegal","setTimeout","makeHumanMove","HeaderSection","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffe1b7db.chunk.js","sourcesContent":["const shipFactory = (length, name) => {\n  let coords = [];\n  let hitPos = [];\n\n  function hit(coords) {\n    hitPos.push(coords);\n    return hitPos;\n  }\n\n  function isSunk() {\n    return hitPos.length === length;\n  }\n  return { length, hitPos, hit, name, isSunk, coords };\n};\n\nexport default shipFactory;\n","import shipFactory from \"./shipFactory\";\n\nfunction random0to9() {\n  return Math.floor(Math.random() * (10 - 0)) + 0;\n}\n\nfunction randomStart() {\n  const coords = [random0to9(), random0to9()];\n  return coords;\n}\n\nfunction randomOrientation() {\n  return random0to9() > 5 ? \"vertical\" : \"horizontal\";\n}\n\nfunction createShipYard(shipLengths, board) {\n  let shipYard = [];\n  shipLengths.forEach((ship) => {\n    const newShip = shipFactory(ship.length, ship.name);\n    // valid coords are in range and not occupied by another ship\n    const newCoords = generateValidCoords(board, newShip);\n    newShip.coords = [...newCoords];\n    // once checked the validity of the coords, the ship can be placed on the board\n    placeShip(board, ship, newCoords);\n    shipYard.push(newShip);\n  });\n\n  return shipYard;\n}\n\nfunction placeShip(board, ship, coords) {\n  coords.forEach((pair) => {\n    const [r, c] = pair;\n    board[r][c].ship = ship.name;\n    board[r][c].status = \"ship\";\n  });\n}\n\nfunction coordsFree(coords, board) {\n  return coords.every((pair) => {\n    const [r, c] = pair;\n    return !board[r][c].status;\n  });\n}\n\nfunction generateValidCoords(board, ship) {\n  let newCoords = generateShipCoords(board, ship);\n  //if the coords on the board are no free, keep generating new coords\n  while (!coordsFree(newCoords, board)) {\n    newCoords = generateShipCoords(board, ship);\n  }\n  return newCoords;\n}\n\nfunction generateShipCoords(board, ship) {\n  const startCoords = randomStart();\n  const orientation = randomOrientation();\n  const [r, c] = startCoords;\n\n  let shipCoords;\n\n  if (orientation === \"horizontal\") {\n    shipCoords = generateHorCoords(r, c, ship);\n  } else {\n    shipCoords = generateVerCoords(r, c, ship);\n  }\n\n  return shipCoords;\n}\n\nfunction generateHorCoords(r, c, ship) {\n  let endPos = null;\n  let shipCoords = [];\n  //if the end position is within the board, generate coords between start and end position, otherwise check in the other direction\n  if (c + (ship.length - 1) < 10) {\n    endPos = c + (ship.length - 1);\n    for (let i = c; i <= endPos; i++) {\n      shipCoords.push([r, i]);\n    }\n  } else {\n    endPos = c - (ship.length - 1);\n    for (let i = c; i >= endPos; i--) {\n      shipCoords.push([r, i]);\n    }\n  }\n  return shipCoords;\n}\n\nfunction generateVerCoords(r, c, ship) {\n  let endPos = null;\n  let shipCoords = [];\n\n  if (r + (ship.length - 1) < 10) {\n    endPos = r + (ship.length - 1);\n    for (let i = r; i <= endPos; i++) {\n      shipCoords.push([i, c]);\n    }\n  } else {\n    endPos = r - (ship.length - 1);\n    for (let i = r; i >= endPos; i--) {\n      shipCoords.push([i, c]);\n    }\n  }\n\n  return shipCoords;\n}\n\nfunction sumShipLengths(shipLengths) {\n  return shipLengths.reduce((tot, cur) => tot + cur.length, 0);\n}\n\nexport { randomStart, randomOrientation, createShipYard, sumShipLengths };\n","import { createShipYard, sumShipLengths } from \"./helpers\";\n\nconst gameBoardFactory = (size) => {\n  const board = [];\n  for (let i = 0; i < size; i++) {\n    let row = [];\n    for (let j = 0; j < size; j++) {\n      let cell = { coords: [i, j], status: null, ship: null };\n      row.push(cell);\n    }\n    board.push(row);\n  }\n\n  const shipLengths = [\n    { name: \"carrier\", length: 5 },\n    { name: \"battleship\", length: 4 },\n    { name: \"destroyer\", length: 3 },\n    { name: \"submarine\", length: 3 },\n    { name: \"patrol boat\", length: 2 },\n  ];\n  const shipYard = createShipYard(shipLengths, board);\n\n  const totalShipLengths = sumShipLengths(shipLengths);\n\n  function receiveAttack(coords) {\n    const [r, c] = coords;\n    if (board[r][c].ship) {\n      const hitShip = shipYard.find((ship) => ship.name === board[r][c].ship);\n      board[r][c].status = \"hit\";\n      hitShip.hit(coords);\n    } else {\n      board[r][c].status = \"missed\";\n    }\n    return board;\n  }\n\n  function getShipsCoords() {\n    let coords = [];\n\n    shipYard.forEach((ship) => {\n      for (let i = 0; i < ship.coords.length; i++) {\n        coords.push(ship.coords[i]);\n      }\n    });\n    return coords;\n  }\n\n  function getEmptySquares() {\n    const emptySquares = [];\n    board.forEach((row) => {\n      for (let i = 0; i < row.length; i++) {\n        if (row[i].status === null) {\n          emptySquares.push(row[i].coords);\n        }\n      }\n    });\n    return emptySquares;\n  }\n\n  function allSunk() {\n    return shipYard.every((ship) => ship.isSunk());\n  }\n\n  function getLegalSquares() {\n    let legalSquares = [];\n    board.forEach((row) => {\n      for (let i = 0; i < row.length; i++) {\n        if (row[i].status !== \"hit\" && row[i].status !== \"missed\") {\n          legalSquares.push(row[i]);\n        }\n      }\n    });\n    return legalSquares;\n  }\n\n  return {\n    board,\n    size,\n    shipYard,\n    receiveAttack,\n    getShipsCoords,\n    getEmptySquares,\n    getLegalSquares,\n    totalShipLengths,\n    allSunk,\n  };\n};\n\nexport default gameBoardFactory;\n","const compPlayerFactory = () => {\n  const prevHand = { adjSquares: [], prevAttack: null };\n\n  function getAttackCoords(legalSquares, wasHumanHit) {\n    let attackCoords;\n\n    if (wasHumanHit) {\n      //get available adjacent squares\n      const adjacentCoords = getAdjacentSquares(\n        legalSquares,\n        prevHand.prevAttack\n      );\n      if (adjacentCoords.length > 0) {\n        attackCoords =\n          adjacentCoords[Math.floor(Math.random() * adjacentCoords.length)];\n        // merge present adj coords with adj coords from previous turns\n        const allAdjCoords = [...prevHand.adjSquares, ...adjacentCoords];\n        // remove current attack and possible duplicates coords\n        const updatedCoords = updateAdjCoords(allAdjCoords, attackCoords);\n        //store all possible adj coords\n        prevHand.adjSquares = [...updatedCoords];\n      } else {\n        attackCoords =\n          legalSquares[Math.floor(Math.random() * legalSquares.length)].coords;\n      }\n    } else {\n      // if human was not hit in the previous turn, check if there are adj coords to try\n      if (prevHand.adjSquares.length > 0) {\n        const adjacentCoords = prevHand.adjSquares;\n        attackCoords =\n          adjacentCoords[Math.floor(Math.random() * adjacentCoords.length)];\n        const updatedAdjCoords = updateAdjCoords(adjacentCoords, attackCoords);\n        prevHand.adjSquares = [...updatedAdjCoords];\n      } else {\n        attackCoords =\n          legalSquares[Math.floor(Math.random() * legalSquares.length)].coords;\n      }\n    }\n    prevHand.prevAttack = [...attackCoords];\n\n    return attackCoords;\n  }\n\n  function getAdjacentSquares(legalSquares, coords) {\n    const [r, c] = coords;\n    return legalSquares\n      .filter((square) => {\n        return (\n          (square.coords[0] === r - 1 && square.coords[1] === c) ||\n          (square.coords[0] === r + 1 && square.coords[1] === c) ||\n          (square.coords[0] === r && square.coords[1] === c - 1) ||\n          (square.coords[0] === r && square.coords[1] === c + 1)\n        );\n      })\n      .map((square) => square.coords);\n  }\n\n  function updateAdjCoords(adjacentCoords, attackCoords) {\n    let uniqCoords;\n    if (adjacentCoords.length > 0) {\n      uniqCoords = adjacentCoords\n        .map(JSON.stringify)\n        .reverse()\n        .filter(function (e, i, a) {\n          return a.indexOf(e, i + 1) === -1; // check if there is any occurence of the item in whole array\n        })\n        .reverse()\n        .map(JSON.parse);\n      for (let i = 0; i < uniqCoords.length; i++) {\n        if (\n          uniqCoords[i][0] === attackCoords[0] &&\n          uniqCoords[i][1] === attackCoords[1]\n        ) {\n          uniqCoords.splice(i, 1);\n        }\n      }\n    }\n    return uniqCoords;\n  }\n\n  return {\n    getAttackCoords,\n    getAdjacentSquares,\n    prevHand,\n    updateAdjCoords,\n  };\n};\n\nexport default compPlayerFactory;\n","import React from \"react\";\n\nconst Board = (props) => {\n  const { board, type } = props;\n  const canClick = type === \"computer\";\n\n  return (\n    <div className={`board ${type}`}>\n      {board.map((row, index) => {\n        return (\n          <div key={index} className=\"row\">\n            {row.map((square) => {\n              const [r, c] = square.coords;\n              const id = r.toString() + c.toString();\n              return (\n                <div\n                  key={id}\n                  className={`square ${square.status}`}\n                  onClick={\n                    canClick ? () => props.onClick(square.coords) : undefined\n                  }\n                ></div>\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\n\nconst PlayerSection = (props) => {\n  return (\n    <div className=\"player-header\">\n      <h1 className=\"player-text\">Player: {props.type}</h1>\n      <h2 className=\"player-text\">\n        Score: {props.score}/{props.totalScore}\n      </h2>\n    </div>\n  );\n};\n\nexport default PlayerSection;\n","import React from \"react\";\nimport { BsArrowRepeat } from \"react-icons/bs\";\n\nconst RestartButton = (props) => {\n  return (\n    <div className=\"button-section\">\n      <button className=\"round-btn\" onClick={props.onClick}>\n        <span id=\"restart-text\">Restart Game</span>\n        <BsArrowRepeat id=\"restart-icon\" />\n      </button>\n    </div>\n  );\n};\n\nexport default RestartButton;\n","import React from \"react\";\n\nconst Modal = (props) => {\n  const showHideClassName = props.show\n    ? \"modal display-block\"\n    : \"modal display-none\";\n\n  let winner;\n  if (props.humanScore === props.totalScore) {\n    winner = \"Human\";\n  } else {\n    winner = \"Computer\";\n  }\n  return (\n    <div className={showHideClassName}>\n      <section className=\"modal-main\">\n        <div className=\"modal-text\">{winner} wins!</div>\n        <button className=\"round-btn modal-btn\" onClick={props.onClick}>\n          OK\n        </button>\n      </section>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React from \"react\";\n\nimport { useState, useEffect } from \"react\";\n\nimport gameBoardFactory from \"../functions/gameBoardFactory\";\nimport compPlayerFactory from \"../functions/compPlayerFactory\";\n\nimport Board from \"./Board\";\nimport PlayerSection from \"./PlayerSection\";\nimport RestartButton from \"./RestartButton\";\nimport Modal from \"./Modal\";\n\nfunction GameSection() {\n  // call gameBoardFactory in function so it doesn't recreate the board on every render\n  const [computer, setComputer] = useState(() => gameBoardFactory(10));\n  const [compBoard, setCompBoard] = useState(computer.board);\n  const [compTurn, setCompTurn] = useState(false);\n  const [compScore, setCompScore] = useState(0);\n  const [wasHumanHit, setWashumanHit] = useState(false);\n\n  const [human, setHuman] = useState(gameBoardFactory(10));\n  const [humanBoard, setHumanBoard] = useState(human.board);\n  const [humanScore, setHumanScore] = useState(0);\n\n  const [compPlayer, setCompPlayer] = useState(compPlayerFactory());\n\n  const [displayWin, setDisplayWin] = useState(false);\n\n  const totalScore = computer.totalShipLengths;\n\n  useEffect(() => {\n    if (humanScore === totalScore) {\n      setCompTurn(false);\n      setDisplayWin(true);\n    }\n    if (compScore === totalScore) {\n      setDisplayWin(true);\n    }\n  }, [humanScore, totalScore, compScore]);\n\n  function handleClick(coords) {\n    if (\n      !compTurn &&\n      isMoveLegal(coords) &&\n      humanScore < totalScore &&\n      compScore < totalScore\n    ) {\n      makeHumanMove(coords);\n    }\n  }\n\n  function makeHumanMove(coords) {\n    const newBoard = computer.receiveAttack(coords);\n    const [r, c] = coords;\n    if (compBoard[r][c].status === \"hit\") {\n      setHumanScore(humanScore + 1);\n    }\n    setCompBoard([...newBoard]);\n    setCompTurn(true);\n    setTimeout(makeCompMove, 1000);\n  }\n\n  function isMoveLegal(coords) {\n    const [r, c] = coords;\n    return (\n      compBoard[r][c].status !== \"hit\" && compBoard[r][c].status !== \"missed\"\n    );\n  }\n\n  function makeCompMove() {\n    const legalSquares = human.getLegalSquares();\n    let compMove = compPlayer.getAttackCoords(legalSquares, wasHumanHit);\n\n    const newBoard = human.receiveAttack(compMove);\n    const [r, c] = compMove;\n    if (humanBoard[r][c].status === \"hit\") {\n      setCompScore(compScore + 1);\n      setWashumanHit(true);\n    } else {\n      setWashumanHit(false);\n    }\n    setHumanBoard(newBoard);\n    setCompTurn(false);\n  }\n\n  function restartGame() {\n    const newHuman = gameBoardFactory(10);\n    setHuman(newHuman);\n    setHumanBoard(newHuman.board);\n    setHumanScore(0);\n    setWashumanHit(false);\n\n    const newComputer = gameBoardFactory(10);\n    setComputer(newComputer);\n    setCompBoard(newComputer.board);\n    setCompScore(0);\n    setCompTurn(false);\n\n    const newCompPlayer = compPlayerFactory();\n    setCompPlayer(newCompPlayer);\n  }\n\n  function closeModal() {\n    setDisplayWin(false);\n    restartGame();\n  }\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"boards-container\">\n        <div className=\"human-container\">\n          <PlayerSection\n            type={\"human\"}\n            score={humanScore}\n            totalScore={totalScore}\n          />\n          <Board board={humanBoard} type={\"human\"} />\n        </div>\n        <RestartButton onClick={restartGame} />\n        <div className=\"computer-container\">\n          <PlayerSection\n            type={\"computer\"}\n            score={compScore}\n            totalScore={totalScore}\n          />\n          <Board board={compBoard} type={\"computer\"} onClick={handleClick} />\n        </div>\n      </div>\n      {displayWin && (\n        <Modal\n          show={displayWin}\n          humanScore={humanScore}\n          compScore={compScore}\n          totalScore={totalScore}\n          onClick={() => closeModal()}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default GameSection;\n","import React from \"react\";\n\nconst HeaderSection = () => {\n  return (\n    <div className=\"header\">\n      <h1 id=\"game-name\">Battleship Game</h1>\n    </div>\n  );\n};\n\nexport default HeaderSection;\n","import React from \"react\";\n\nimport \"./App.css\";\nimport GameSection from \"./components/GameSection\";\nimport HeaderSection from \"./components/HeaderSection\";\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <HeaderSection />\n      <GameSection />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}