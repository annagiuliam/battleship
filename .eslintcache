[{"/home/annagiuliam/Documents/odin/react/battleship/src/index.js":"1","/home/annagiuliam/Documents/odin/react/battleship/src/App.js":"2","/home/annagiuliam/Documents/odin/react/battleship/src/functions/gameFlow.js":"3","/home/annagiuliam/Documents/odin/react/battleship/src/components/Board.js":"4","/home/annagiuliam/Documents/odin/react/battleship/src/functions/gameBoardFactory.js":"5","/home/annagiuliam/Documents/odin/react/battleship/src/functions/helpers.js":"6","/home/annagiuliam/Documents/odin/react/battleship/src/functions/shipFactory.js":"7","/home/annagiuliam/Documents/odin/react/battleship/src/functions/compPlayerFactory.js":"8"},{"size":197,"mtime":1611845683044,"results":"9","hashOfConfig":"10"},{"size":2477,"mtime":1613043286013,"results":"11","hashOfConfig":"10"},{"size":216,"mtime":1612449792494,"results":"12","hashOfConfig":"10"},{"size":958,"mtime":1613033280041,"results":"13","hashOfConfig":"10"},{"size":2201,"mtime":1613043234433,"results":"14","hashOfConfig":"10"},{"size":2892,"mtime":1612448550802,"results":"15","hashOfConfig":"10"},{"size":304,"mtime":1612434089902,"results":"16","hashOfConfig":"10"},{"size":4217,"mtime":1613044238325,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"3lnyej",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"/home/annagiuliam/Documents/odin/react/battleship/src/index.js",[],["38","39"],"/home/annagiuliam/Documents/odin/react/battleship/src/App.js",["40"],"import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport gameBoardFactory from \"./functions/gameBoardFactory\";\nimport compPlayerFactory from \"./functions/compPlayerFactory\";\nimport gameFlow from \"./functions/gameFlow\";\nimport Board from \"./components/Board\";\n\nfunction App() {\n  const [computer] = useState(gameBoardFactory(10));\n  const [compBoard, setCompBoard] = useState(computer.board);\n  const [compTurn, setCompTurn] = useState(false);\n  const [compScore, setCompScore] = useState(0);\n  const [wasHumanHit, setWashumanHit] = useState(false);\n  // const [prevCompAttack, setPrevCompAttack] = useState(null);\n\n  const [human] = useState(gameBoardFactory(10));\n  const [humanBoard, setHumanBoard] = useState(human.board);\n  const [humanScore, setHumanScore] = useState(0);\n\n  const [compPlayer] = useState(compPlayerFactory());\n\n  const totalScore = computer.totalShipLengths;\n\n  useEffect(() => {\n    //console.log(computer.receivedHits);\n  });\n  function handleClick(coords) {\n    if (!compTurn && isMoveLegal(coords)) {\n      makeHumanMove(coords);\n    }\n  }\n\n  function makeHumanMove(coords) {\n    const newBoard = computer.receiveAttack(coords);\n    const [x, y] = coords;\n    if (compBoard[x][y].status === \"hit\") {\n      setHumanScore(humanScore + 1);\n    }\n    setCompBoard([...newBoard]);\n    setCompTurn(true);\n    setTimeout(makeCompMove, 1000);\n  }\n\n  function isMoveLegal(coords) {\n    const [x, y] = coords;\n    return (\n      compBoard[x][y].status !== \"hit\" && compBoard[x][y].status !== \"missed\"\n    );\n  }\n\n  function makeCompMove() {\n    const legalSquares = human.getLegalSquares();\n    let compMove = compPlayer.getAttackCoords(\n      legalSquares,\n      wasHumanHit\n      // prevCompAttack\n    );\n    //setPrevCompAttack(compMove);\n    const newBoard = human.receiveAttack(compMove);\n    const [x, y] = compMove;\n    if (humanBoard[x][y].status === \"hit\") {\n      setCompScore(compScore + 1);\n      setWashumanHit(true);\n    } else {\n      setWashumanHit(false);\n    }\n    setHumanBoard(newBoard);\n    setCompTurn(false);\n  }\n\n  return (\n    <div className=\"boards-container\">\n      <Board\n        board={humanBoard}\n        type={\"human\"}\n        score={humanScore}\n        totalScore={totalScore}\n      />\n      <Board\n        board={compBoard}\n        type={\"computer\"}\n        onClick={handleClick}\n        score={compScore}\n        totalScore={totalScore}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","/home/annagiuliam/Documents/odin/react/battleship/src/functions/gameFlow.js",[],"/home/annagiuliam/Documents/odin/react/battleship/src/components/Board.js",[],"/home/annagiuliam/Documents/odin/react/battleship/src/functions/gameBoardFactory.js",[],"/home/annagiuliam/Documents/odin/react/battleship/src/functions/helpers.js",[],"/home/annagiuliam/Documents/odin/react/battleship/src/functions/shipFactory.js",[],["41","42"],"/home/annagiuliam/Documents/odin/react/battleship/src/functions/compPlayerFactory.js",["43"],"const compPlayerFactory = () => {\n  const prevHand = { adjSquares: [], prevAttack: null };\n\n  function getAttackCoords(legalSquares, wasHumanHit) {\n    let attackCoords;\n    //console.log(prevHand);\n    //console.log(legalSquares);\n    if (wasHumanHit) {\n      //get available adjacent squares\n      const adjacentCoords = getAdjacentSquares(\n        legalSquares,\n        prevHand.prevAttack\n      );\n      console.log(\"human hit\");\n      console.log(\"adjcoords\");\n      console.log(adjacentCoords);\n\n      if (adjacentCoords.length > 0) {\n        attackCoords =\n          adjacentCoords[Math.floor(Math.random() * adjacentCoords.length)];\n        // remove attack coords from list of available adj coords\n        console.log(\"adjcoords\");\n        console.log(adjacentCoords);\n        console.log(\"attackcoords\");\n        console.log(attackCoords);\n        // remove attack coords from adj coords fomr this hand and from previous hand\n        //const newAdjCoords = updateAdjCoords(adjacentCoords, attackCoords);\n\n        const allAdjCoords = [...prevHand.adjSquares, ...adjacentCoords];\n        console.log(\"all adj coords\");\n        console.log(allAdjCoords);\n        const updatedCoords = updateAdjCoords(allAdjCoords, attackCoords);\n        console.log(\"updated adj coords\");\n        console.log(updatedCoords);\n        prevHand.adjSquares = [...updatedCoords];\n        console.log(\"new prev hand adj coords\");\n        console.log(prevHand.adjSquares);\n      } else {\n        attackCoords =\n          legalSquares[Math.floor(Math.random() * legalSquares.length)].coords;\n      }\n    } else {\n      if (prevHand.adjSquares.length > 0) {\n        const adjacentCoords = prevHand.adjSquares;\n        attackCoords =\n          adjacentCoords[Math.floor(Math.random() * adjacentCoords.length)];\n        console.log(\"adj sq\");\n        console.log(adjacentCoords);\n        console.log(attackCoords);\n        const updatedAdjCoords = updateAdjCoords(adjacentCoords, attackCoords);\n\n        prevHand.adjSquares = [...updatedAdjCoords];\n        console.log(prevHand.adjSquares);\n      } else {\n        attackCoords =\n          legalSquares[Math.floor(Math.random() * legalSquares.length)].coords;\n      }\n    }\n    prevHand.prevAttack = [...attackCoords];\n\n    return attackCoords;\n  }\n\n  function updatePrevHand(newAdjCoords, prevHand) {\n    if (newAdjCoords.length > 0) {\n      prevHand.adjSquares = [...prevHand.adjSquares, ...newAdjCoords];\n    }\n    console.log(prevHand.adjSquares);\n  }\n\n  function getAdjacentSquares(legalSquares, coords) {\n    const [x, y] = coords;\n    const adjCoords = [];\n\n    for (let i = 0; i < legalSquares.length; i++) {\n      if (\n        (legalSquares[i].coords[0] === x - 1 &&\n          legalSquares[i].coords[1] === y) ||\n        (legalSquares[i].coords[0] === x + 1 &&\n          legalSquares[i].coords[1] === y) ||\n        (legalSquares[i].coords[0] === x &&\n          legalSquares[i].coords[1] === y - 1) ||\n        (legalSquares[i].coords[0] === x && legalSquares[i].coords[1] === y + 1)\n      ) {\n        adjCoords.push(legalSquares[i].coords);\n      }\n    }\n    return adjCoords;\n  }\n\n  function updateAdjCoords(adjacentCoords, attackCoords) {\n    if (adjacentCoords.length > 0) {\n      for (let i = 0; i < adjacentCoords.length; i++) {\n        if (\n          adjacentCoords[i][0] === attackCoords[0] &&\n          adjacentCoords[i][1] === attackCoords[1]\n        ) {\n          adjacentCoords.splice(i, 1);\n        }\n      }\n    }\n\n    return adjacentCoords;\n  }\n\n  // function usePrevious(adjacentCoords) {\n  //   const attackCoords =\n  //     adjacentCoords[Math.floor(Math.random() * adjacentCoords.length)];\n  //   const newAdjCoords = updateAdjCoords(adjacentCoords, attackCoords);\n  //   prevHand.adjSquares = [...newAdjCoords];\n  //   prevHand.prevAttack = [...attackCoords];\n  //   return attackCoords;\n  // }\n  // function checkHit() {\n  //   if (prevHand.prevAttack) {\n  //     const [x, y] = prevHand.prevAttack;\n  //     return humanBoard[x][y].status === \"hit\";\n  //   } else {\n  //     return false;\n  //   }\n  // }\n\n  return {\n    //humanBoard,\n    getAttackCoords,\n    getAdjacentSquares,\n    prevHand,\n    updateAdjCoords,\n  };\n};\n\nexport default compPlayerFactory;\n",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":6,"column":8,"nodeType":"50","messageId":"51","endLine":6,"endColumn":16},{"ruleId":"44","replacedBy":"52"},{"ruleId":"46","replacedBy":"53"},{"ruleId":"48","severity":1,"message":"54","line":64,"column":12,"nodeType":"50","messageId":"51","endLine":64,"endColumn":26},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'gameFlow' is defined but never used.","Identifier","unusedVar",["55"],["56"],"'updatePrevHand' is defined but never used.","no-global-assign","no-unsafe-negation"]